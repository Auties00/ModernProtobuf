package it.auties.protobuf;

import it.auties.protobuf.exception.ProtobufDeserializationException;
import it.auties.protobuf.exception.ProtobufSerializationException;
import it.auties.protobuf.model.ProtobufEnum;
import it.auties.protobuf.model.ProtobufMessage;
import it.auties.protobuf.model.ProtobufVersion;
import lombok.NonNull;

/**
 * Utility class to read and write protobuf objects
 */
public class Protobuf {
    /**
     * The default version used to serialize and deserialize values
     */
    private static ProtobufVersion defaultVersion = ProtobufVersion.PROTOBUF_3;


    /**
     * Sets the default protobuf version to use
     *
     * @param version the non-null version
     */
    public static void setDefaultVersion(@NonNull ProtobufVersion version) {
        defaultVersion = version;
    }

    /**
     * The name of the serialization method generated by the Javac plugin
     */
    public static final String SERIALIZATION_METHOD = "toEncodedProtobuf";

    /**
     * The name of the deserialization method generated by the Javac plugin for messages
     */
    public static final String DESERIALIZATION_CLASS_METHOD = "ofProtobuf";

    /**
     * The name of the deserialization method generated by the Javac plugin for enums
     */
    public static final String DESERIALIZATION_ENUM_METHOD = "of";

    /**
     * The version to use to serialize and deserialize protobuf objects
     */
    private final ProtobufVersion version;

    /**
     * Constructs an instance of this class from a version
     *
     * @param version the non-null version
     */
    public Protobuf(@NonNull ProtobufVersion version) {
        this.version = version;
    }

    /**
     * Reads a serialized message
     *
     * @param message the message
     * @param clazz   the explicit type of the deserialized message
     * @param <T>     the type of the deserialized message
     * @return a non-null deserialized message
     */
    @SuppressWarnings("unchecked")
    public <T> T read(byte[] message, Class<T> clazz) {
        try {
            var method = clazz.getMethod(DESERIALIZATION_CLASS_METHOD, ProtobufVersion.class, byte[].class);
            return (T) method.invoke(null, version, message);
        } catch (Throwable exception) {
            throw new ProtobufDeserializationException(exception);
        }
    }

    /**
     * Reads a serialized message
     *
     * @param message the message
     * @param clazz   the explicit type of the deserialized message
     * @param <T>     the type of the deserialized message
     * @return a non-null deserialized message
     */
    @SuppressWarnings("unchecked")
    public static <T> T readMessage(byte[] message, Class<T> clazz) {
        try {
            var method = clazz.getMethod(DESERIALIZATION_CLASS_METHOD, ProtobufVersion.class, byte[].class);
            return (T) method.invoke(null, defaultVersion, message);
        } catch (Throwable exception) {
            throw new ProtobufDeserializationException(exception);
        }
    }

    /**
     * Reads a serialized enum
     *
     * @param index the index of the serialized enum
     * @param clazz the explicit type of the deserialized enum
     * @param <T>   the type of the deserialized enum
     * @return a non-null deserialized enum
     */
    public static <T extends Enum<?>> T read(int index, Class<T> clazz) {
        return readEnum(index, clazz);
    }

    /**
     * Reads a serialized enum
     *
     * @param index the index of the serialized enum
     * @param clazz the explicit type of the deserialized enum
     * @param <T>   the type of the deserialized enum
     * @return a non-null deserialized enum
     */
    @SuppressWarnings("unchecked")
    public static <T extends Enum<?>> T readEnum(int index, Class<T> clazz) {
        try {
            var method = clazz.getMethod(DESERIALIZATION_ENUM_METHOD, int.class);
            return (T) method.invoke(null, new Object[]{index});
        } catch (Throwable exception) {
            throw new ProtobufDeserializationException(exception);
        }
    }

    /**
     * Serializes a message as an array of bytes
     *
     * @param message the message to serialize
     * @return a non-null byte array
     */
    public byte[] write(ProtobufMessage message) {
        try {
            return message.toEncodedProtobuf(version);
        }catch (Throwable throwable) {
            throw new ProtobufSerializationException(throwable);
        }
    }

    /**
     * Serializes a message as an array of bytes
     *
     * @param message the message to serialize
     * @return a non-null byte array
     */
    public static byte[] writeMessage(ProtobufMessage message) {
        try {
            return message.toEncodedProtobuf(defaultVersion);
        }catch (Throwable throwable) {
            throw new ProtobufSerializationException(throwable);
        }
    }

    /**
     * Serializes an enum as an integer
     *
     * @param protobufEnum the enum to serialize
     * @return an unsigned int
     */
    public int write(ProtobufEnum protobufEnum) {
        return protobufEnum.index();
    }

    /**
     * Serializes an enum as an integer
     *
     * @param protobufEnum the enum to serialize
     * @return an unsigned int
     */
    public static int writeEnum(ProtobufEnum protobufEnum) {
        return protobufEnum.index();
    }
}
