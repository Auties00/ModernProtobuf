/home/alessandro/.jdks/azul-23.0.1/bin/java -javaagent:/snap/intellij-idea-community/562/lib/idea_rt.jar=35959:/snap/intellij-idea-community/562/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /home/alessandro/IdeaProjects/ModernProtobuf/plugin/test/target/classes:/home/alessandro/IdeaProjects/ModernProtobuf/base/target/classes:/home/alessandro/.m2/repository/com/google/protobuf/protobuf-java/4.28.2/protobuf-java-4.28.2.jar:/home/alessandro/.m2/repository/org/openjdk/jmh/jmh-core/1.37/jmh-core-1.37.jar:/home/alessandro/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/home/alessandro/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-protobuf/2.14.0/jackson-dataformat-protobuf-2.14.0.jar:/home/alessandro/.m2/repository/com/squareup/protoparser/4.0.3/protoparser-4.0.3.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.14.0/jackson-databind-2.14.0.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.14.0/jackson-annotations-2.14.0.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.14.0/jackson-core-2.14.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter/5.9.0/junit-jupiter-5.9.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.0/junit-jupiter-api-5.9.0.jar:/home/alessandro/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/alessandro/.m2/repository/org/junit/platform/junit-platform-commons/1.9.0/junit-platform-commons-1.9.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.0/junit-jupiter-params-5.9.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.0/junit-jupiter-engine-5.9.0.jar:/home/alessandro/.m2/repository/org/junit/platform/junit-platform-engine/1.9.0/junit-platform-engine-1.9.0.jar:/home/alessandro/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar org.openjdk.jmh.Main it.auties.proto.benchmark.PrimitivesBenchmark.*
# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+11
# VM invoker: /home/alessandro/.jdks/azul-23.0.1/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/562/lib/idea_rt.jar=35959:/snap/intellij-idea-community/562/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PrimitivesBenchmark.googleLiteProtobufDeserialization

# Run progress: 0.00% complete, ETA 00:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 180.772 us/op
# Warmup Iteration   2: 179.159 us/op
# Warmup Iteration   3: 178.458 us/op
Iteration   1: 178.338 us/op
Iteration   2: 179.211 us/op
Iteration   3: 179.372 us/op
Iteration   4: 178.912 us/op
Iteration   5: 179.411 us/op


Result "it.auties.proto.benchmark.PrimitivesBenchmark.googleLiteProtobufDeserialization":
  179.049 ?(99.9%) 1.708 us/op [Average]
  (min, avg, max) = (178.338, 179.049, 179.411), stdev = 0.444
  CI (99.9%): [177.341, 180.757] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+11
# VM invoker: /home/alessandro/.jdks/azul-23.0.1/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/562/lib/idea_rt.jar=35959:/snap/intellij-idea-community/562/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PrimitivesBenchmark.googleLiteProtobufSerialization

# Run progress: 16.67% complete, ETA 00:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 176.913 us/op
# Warmup Iteration   2: 174.885 us/op
# Warmup Iteration   3: 175.114 us/op
Iteration   1: 175.333 us/op
Iteration   2: 174.929 us/op
Iteration   3: 175.304 us/op
Iteration   4: 174.942 us/op
Iteration   5: 175.032 us/op


Result "it.auties.proto.benchmark.PrimitivesBenchmark.googleLiteProtobufSerialization":
  175.108 ?(99.9%) 0.755 us/op [Average]
  (min, avg, max) = (174.929, 175.108, 175.333), stdev = 0.196
  CI (99.9%): [174.352, 175.863] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+11
# VM invoker: /home/alessandro/.jdks/azul-23.0.1/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/562/lib/idea_rt.jar=35959:/snap/intellij-idea-community/562/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PrimitivesBenchmark.googleProtobufDeserialization

# Run progress: 33.33% complete, ETA 00:05:22
# Fork: 1 of 1
# Warmup Iteration   1: 125.608 us/op
# Warmup Iteration   2: 124.333 us/op
# Warmup Iteration   3: 124.872 us/op
Iteration   1: 125.167 us/op
Iteration   2: 125.146 us/op
Iteration   3: 125.148 us/op
Iteration   4: 125.257 us/op
Iteration   5: 124.981 us/op


Result "it.auties.proto.benchmark.PrimitivesBenchmark.googleProtobufDeserialization":
  125.140 ?(99.9%) 0.385 us/op [Average]
  (min, avg, max) = (124.981, 125.140, 125.257), stdev = 0.100
  CI (99.9%): [124.755, 125.525] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+11
# VM invoker: /home/alessandro/.jdks/azul-23.0.1/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/562/lib/idea_rt.jar=35959:/snap/intellij-idea-community/562/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PrimitivesBenchmark.googleProtobufSerialization

# Run progress: 50.00% complete, ETA 00:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 74.829 us/op
# Warmup Iteration   2: 74.351 us/op
# Warmup Iteration   3: 74.680 us/op
Iteration   1: 74.777 us/op
Iteration   2: 74.814 us/op
Iteration   3: 74.671 us/op
Iteration   4: 74.577 us/op
Iteration   5: 74.625 us/op


Result "it.auties.proto.benchmark.PrimitivesBenchmark.googleProtobufSerialization":
  74.693 ?(99.9%) 0.386 us/op [Average]
  (min, avg, max) = (74.577, 74.693, 74.814), stdev = 0.100
  CI (99.9%): [74.307, 75.079] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+11
# VM invoker: /home/alessandro/.jdks/azul-23.0.1/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/562/lib/idea_rt.jar=35959:/snap/intellij-idea-community/562/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PrimitivesBenchmark.modernProtobufDeserialization

# Run progress: 66.67% complete, ETA 00:02:41
# Fork: 1 of 1
# Warmup Iteration   1: 107.881 us/op
# Warmup Iteration   2: 72.491 us/op
# Warmup Iteration   3: 67.637 us/op
Iteration   1: 67.632 us/op
Iteration   2: 67.738 us/op
Iteration   3: 67.659 us/op
Iteration   4: 67.679 us/op
Iteration   5: 67.649 us/op


Result "it.auties.proto.benchmark.PrimitivesBenchmark.modernProtobufDeserialization":
  67.671 ?(99.9%) 0.158 us/op [Average]
  (min, avg, max) = (67.632, 67.671, 67.738), stdev = 0.041
  CI (99.9%): [67.514, 67.829] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+11
# VM invoker: /home/alessandro/.jdks/azul-23.0.1/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/562/lib/idea_rt.jar=35959:/snap/intellij-idea-community/562/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PrimitivesBenchmark.modernProtobufSerialization

# Run progress: 83.33% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 56.092 us/op
# Warmup Iteration   2: 55.348 us/op
# Warmup Iteration   3: 55.427 us/op
Iteration   1: 55.240 us/op
Iteration   2: 55.267 us/op
Iteration   3: 55.400 us/op
Iteration   4: 55.505 us/op
Iteration   5: 55.620 us/op


Result "it.auties.proto.benchmark.PrimitivesBenchmark.modernProtobufSerialization":
  55.407 ?(99.9%) 0.617 us/op [Average]
  (min, avg, max) = (55.240, 55.407, 55.620), stdev = 0.160
  CI (99.9%): [54.790, 56.023] (assumes normal distribution)


# Run complete. Total time: 00:08:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                     Mode  Cnt    Score   Error  Units
SimplePerformanceBenchmark.googleLiteProtobufDeserialization  avgt    5  179.049 ? 1.708  us/op
SimplePerformanceBenchmark.googleLiteProtobufSerialization    avgt    5  175.108 ? 0.755  us/op
SimplePerformanceBenchmark.googleProtobufDeserialization      avgt    5  125.140 ? 0.385  us/op
SimplePerformanceBenchmark.googleProtobufSerialization        avgt    5   74.693 ? 0.386  us/op
SimplePerformanceBenchmark.modernProtobufDeserialization      avgt    5   67.671 ? 0.158  us/op
SimplePerformanceBenchmark.modernProtobufSerialization        avgt    5   55.407 ? 0.617  us/op

Process finished with exit code 0
