/home/alessandro/.jdks/openjdk-21/bin/java -javaagent:/snap/intellij-idea-community/495/lib/idea_rt.jar=44085:/snap/intellij-idea-community/495/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /home/alessandro/IdeaProjects/ModernProtobuf/plugin/test/target/classes:/home/alessandro/IdeaProjects/ModernProtobuf/base/target/classes:/home/alessandro/.m2/repository/com/google/protobuf/protobuf-java/3.24.2/protobuf-java-3.24.2.jar:/home/alessandro/.m2/repository/com/google/protobuf/protobuf-javalite/3.24.2/protobuf-javalite-3.24.2.jar:/home/alessandro/.m2/repository/org/openjdk/jmh/jmh-core/1.35/jmh-core-1.35.jar:/home/alessandro/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/home/alessandro/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/home/alessandro/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.35/jmh-generator-annprocess-1.35.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-protobuf/2.14.0/jackson-dataformat-protobuf-2.14.0.jar:/home/alessandro/.m2/repository/com/squareup/protoparser/4.0.3/protoparser-4.0.3.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.14.0/jackson-databind-2.14.0.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.14.0/jackson-annotations-2.14.0.jar:/home/alessandro/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.14.0/jackson-core-2.14.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter/5.9.0/junit-jupiter-5.9.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.0/junit-jupiter-api-5.9.0.jar:/home/alessandro/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/alessandro/.m2/repository/org/junit/platform/junit-platform-commons/1.9.0/junit-platform-commons-1.9.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.0/junit-jupiter-params-5.9.0.jar:/home/alessandro/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.0/junit-jupiter-engine-5.9.0.jar:/home/alessandro/.m2/repository/org/junit/platform/junit-platform-engine/1.9.0/junit-platform-engine-1.9.0.jar:/home/alessandro/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar org.openjdk.jmh.Main it.auties.proto.benchmark.PerformanceBenchmark.*
# JMH version: 1.35
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: /home/alessandro/.jdks/openjdk-21/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/495/lib/idea_rt.jar=44085:/snap/intellij-idea-community/495/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PerformanceBenchmark.googleLiteProtobuf

# Run progress: 0.00% complete, ETA 00:05:20
# Fork: 1 of 1
# Warmup Iteration   1: 187.240 us/op
# Warmup Iteration   2: 192.699 us/op
# Warmup Iteration   3: 184.710 us/op
Iteration   1: 184.539 us/op
Iteration   2: 183.875 us/op
Iteration   3: 184.205 us/op
Iteration   4: 184.216 us/op
Iteration   5: 184.053 us/op


Result "it.auties.proto.benchmark.PerformanceBenchmark.googleLiteProtobuf":
  184.178 ±(99.9%) 0.943 us/op [Average]
  (min, avg, max) = (183.875, 184.178, 184.539), stdev = 0.245
  CI (99.9%): [183.235, 185.120] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: /home/alessandro/.jdks/openjdk-21/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/495/lib/idea_rt.jar=44085:/snap/intellij-idea-community/495/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PerformanceBenchmark.googleProtobuf

# Run progress: 25.00% complete, ETA 00:04:02
# Fork: 1 of 1
# Warmup Iteration   1: 104.060 us/op
# Warmup Iteration   2: 103.750 us/op
# Warmup Iteration   3: 103.574 us/op
Iteration   1: 103.546 us/op
Iteration   2: 103.515 us/op
Iteration   3: 103.687 us/op
Iteration   4: 103.433 us/op
Iteration   5: 103.613 us/op


Result "it.auties.proto.benchmark.PerformanceBenchmark.googleProtobuf":
  103.559 ±(99.9%) 0.372 us/op [Average]
  (min, avg, max) = (103.433, 103.559, 103.687), stdev = 0.097
  CI (99.9%): [103.187, 103.931] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: /home/alessandro/.jdks/openjdk-21/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/495/lib/idea_rt.jar=44085:/snap/intellij-idea-community/495/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PerformanceBenchmark.jacksonProtobuf

# Run progress: 50.00% complete, ETA 00:02:41
# Fork: 1 of 1
# Warmup Iteration   1: 595.445 us/op
# Warmup Iteration   2: 587.929 us/op
# Warmup Iteration   3: 586.218 us/op
Iteration   1: 586.524 us/op
Iteration   2: 586.296 us/op
Iteration   3: 586.590 us/op
Iteration   4: 587.087 us/op
Iteration   5: 585.507 us/op


Result "it.auties.proto.benchmark.PerformanceBenchmark.jacksonProtobuf":
  586.401 ±(99.9%) 2.222 us/op [Average]
  (min, avg, max) = (585.507, 586.401, 587.087), stdev = 0.577
  CI (99.9%): [584.179, 588.623] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: /home/alessandro/.jdks/openjdk-21/bin/java
# VM options: -javaagent:/snap/intellij-idea-community/495/lib/idea_rt.jar=44085:/snap/intellij-idea-community/495/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: it.auties.proto.benchmark.PerformanceBenchmark.modernProtobufPerformance

# Run progress: 75.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 89.851 us/op
# Warmup Iteration   2: 89.372 us/op
# Warmup Iteration   3: 90.959 us/op
Iteration   1: 90.884 us/op
Iteration   2: 90.858 us/op
Iteration   3: 90.934 us/op
Iteration   4: 90.763 us/op
Iteration   5: 90.939 us/op


Result "it.auties.proto.benchmark.PerformanceBenchmark.modernProtobufPerformance":
  90.875 ±(99.9%) 0.276 us/op [Average]
  (min, avg, max) = (90.763, 90.875, 90.939), stdev = 0.072
  CI (99.9%): [90.600, 91.151] (assumes normal distribution)


# Run complete. Total time: 00:05:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       Mode  Cnt    Score   Error  Units
PerformanceBenchmark.googleLiteProtobuf         avgt    5  184.178 ± 0.943  us/op
PerformanceBenchmark.googleProtobuf             avgt    5  103.559 ± 0.372  us/op
PerformanceBenchmark.jacksonProtobuf            avgt    5  586.401 ± 2.222  us/op
PerformanceBenchmark.modernProtobufPerformance  avgt    5   90.875 ± 0.276  us/op

Process finished with exit code 0
